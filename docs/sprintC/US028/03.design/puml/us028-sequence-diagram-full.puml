@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

actor "Collaborator" as ACTOR
participant ":TasksAssinedToMeBetweenToDatesUI" as UI
participant ":TasksAssignedToMeBetweenToDatesController" as CTRL
participant ":TaskStatus" as taskStatus
participant ":Repositories" as RepositorySingleton
participant "repositories\n:Repositories" as PLAT

participant "taskRepository\n:TaskRepository" as TaskRepository

participant "employeeRepository:\nEmployeeRepository" as EmployeeRepository
participant "employee" as employee
participant ":Task" as TASK

activate ACTOR

ref over ACTOR, UI: This action assumes that the user has already logged in

ACTOR -> UI: I wish to consult the tasks assigned to me between two dates

activate UI

UI -> CTRL:getTaskStatus()
    activate CTRL
        CTRL -> taskStatus: getTaskStatus()
        activate taskStatus

        taskStatus-->CTRL: taskStatus
        deactivate taskStatus
    CTRL-->UI: taskStatus
    deactivate CTRL

UI --> ACTOR: Requests data (Start date, end date, task status)
deactivate UI

ACTOR -> UI: Selects requested data
activate UI

    UI -> CTRL: getTasksAssignedToMeBetweenToDates(startDate, endDate, taskStatus)


        activate CTRL
        CTRL->CTRL: getEmployeeFromRepository()
                        activate CTRL
                        CTRL -> RepositorySingleton : getInstance()
                        activate RepositorySingleton

                        RepositorySingleton --> CTRL : repositories
                        deactivate RepositorySingleton

                        CTRL -> PLAT : getEmployeeRepositories()
                        activate PLAT


                        PLAT --> CTRL : EmployeeRepositories
                        deactivate PLAT


                        CTRL -> EmployeeRepository: getEmployee()
                        activate EmployeeRepository
                        EmployeeRepository -->CTRL: employee
                        deactivate EmployeeRepository

                    CTRL-->CTRL: employee
                    deactivate CTRL

                    |||




'
'CTRL->CTRL: getEmployeeTasksFromRepository()
'                        activate CTRL
'        CTRL -> RepositorySingleton: getInstance()
'        activate RepositorySingleton
'        RepositorySingleton --> CTRL: repositories
'        deactivate RepositorySingleton
'
'        CTRL -> PLAT: getTaskRepository()
'        activate PLAT
'        PLAT --> CTRL: taskRepository
'        deactivate PLAT
'
'    CTRL -> EmployeeRepository: getEmployeeTasks()
'                            activate EmployeeRepository
'                            EmployeeRepository -->CTRL: tasks
'                            deactivate EmployeeRepository
'
'                        CTRL-->CTRL: tasks
'                        deactivate CTRL






        CTRL -> employee: getEmployeeTasksBetweenToDates(startDate, endDate, taskStatus)
        activate employee


               employee->TASK: getEmployeeTasksBetweenToDates(startDate, endDate, taskStatus)
                activate TASK
                TASK --> employee: List of tasks
                deactivate TASK
'            loop for each task
'                TaskRepository -> TASK: hasStatus(taskStatus)
'                activate TASK
'                TASK --> TaskRepository
'                deactivate TASK
'
'                TaskRepository -> TASK: isBetweenDates(startDate, endDate)
'                activate TASK
'                TASK --> TaskRepository
'                deactivate TASK
'
'                TaskRepository -> TASK: isAssignedToCurrentCollaborator()
'                activate TASK
'                TASK --> TaskRepository
'                deactivate TASK
'            end loop

'            TaskRepository -> TaskRepository: sortTasksByDate()

        employee --> CTRL: List of tasks
        deactivate employee

    CTRL --> UI: List of tasks
    deactivate CTRL

UI --> ACTOR: Shows the list of tasks
deactivate UI

@enduml
