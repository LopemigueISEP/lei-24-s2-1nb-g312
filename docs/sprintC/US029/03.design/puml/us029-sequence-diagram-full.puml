@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

actor "Collaborator" as ACTOR
participant ":TaskUI" as UI
participant ":TaskController" as CTRL
participant ":Repositories" as REPOS_Singleton
participant "repositories\n:Repositories" as REPOS_Instance
participant "taskRepository\n:TaskRepository" as TASK_REPO
participant "employeeRepository:\nEmployeeRepository" as EmployeeRepository
participant "employee\n:Employee" as Employee
participant ":Task" as TASK

activate ACTOR

ref over ACTOR, UI: This action assumes that the user has already logged in

ACTOR -> UI: selects a task to complete
activate UI
    UI -> CTRL: getTasksWithAssignedTeam()
    activate CTRL

            CTRL -> REPOS_Singleton : getInstance()
            activate REPOS_Singleton

                REPOS_Singleton --> CTRL: repositories
            deactivate REPOS_Singleton

            CTRL -> PLAT : getTaskRepository()
            activate PLAT

                PLAT --> CTRL: TaskRepository
            deactivate PLAT

            CTRL -> TaskRepository : getTasksWithAssignedTeam()
            activate TaskRepository

                TaskRepository --> CTRL : taskWithAssignedTeamList
            deactivate TaskRepository


            CTRL --> UI : taskWithAssignedTeamList
        deactivate CTRL
UI --> ACTOR: requests data(optionalObservations,endDate)
deactivate UI

ACTOR -> UI: types requested data
activate UI

    UI -> CTRL: completeTask(task, observations,newEndDate)
    activate CTRL

        activate CTRL
            CTRL->CTRL: getEmployeeFromRepository()
            CTRL -> REPOS_Singleton : getInstance()
            activate REPOS_Singleton
                REPOS_Singleton --> CTRL : repositories
            deactivate REPOS_Singleton
            CTRL -> PLAT : getEmployeeRepositories()
            activate PLAT
                PLAT --> CTRL : EmployeeRepositories
            deactivate PLAT
            CTRL -> EmployeeRepository: getEmployee()
            activate EmployeeRepository
                EmployeeRepository -->CTRL: employee
            deactivate EmployeeRepository
            CTRL --> CTRL: Employee
            CTRL -> Employee: completeTask(task, observations,newEndDate)
            activate Employee
                Employee ->Task: completeTask(task, observations,newEndDate)
            deactivate Employee
                activate Task
                    Task -> Task : complete()
                     Task--> CTRL: task
                deactivate Task
            deactivate Employee
            CTRL --> UI: task

        deactivate CTRL
UI --> ACTOR: Displays operation success
deactivate UI

@enduml
